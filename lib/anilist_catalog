// anilist_catalog.js
// Minimal AniList-powered catalogs for the Kitsu add-on:
// - Trending Now
// - Popular This Season
// Returns Stremio-ready catalog metas using id: `anilist:{id}`.
// Movies are excluded via format_not_in: [MOVIE].

const ANILIST_URL = 'https://graphql.anilist.co';
const PAGE_SIZE = 20;

async function gql(query, variables) {
  const res = await fetch(ANILIST_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
    body: JSON.stringify({ query, variables })
  });
  if (!res.ok) {
    const text = await res.text().catch(() => '');
    throw new Error(`AniList HTTP ${res.status}: ${text}`);
  }
  const json = await res.json();
  if (json.errors) throw new Error(JSON.stringify(json.errors));
  return json.data;
}

function pickTitle(t) {
  return t?.english || t?.romaji || t?.native || 'Unknown';
}

function toCatalogMeta(media) {
  return {
    id: `anilist:${media.id}`,
    type: 'series', // keep 'anime' to match existing Kitsu add-on catalogs
    name: pickTitle(media.title),
    description: media.description ? String(media.description).replace(/<[^>]+>/g, '') : undefined,
    poster: media.coverImage?.large || media.coverImage?.medium,
    background: media.bannerImage || undefined,
    genres: media.genres || [],
    year: media.seasonYear || undefined,
  };
}

function getCurrentSeasonYear(now = new Date()) {
  const m = now.getUTCMonth() + 1; // 1..12
  const y = now.getUTCFullYear();
  if (m >= 1 && m <= 3) return { season: 'WINTER', seasonYear: y };
  if (m >= 4 && m <= 6) return { season: 'SPRING', seasonYear: y };
  if (m >= 7 && m <= 9) return { season: 'SUMMER', seasonYear: y };
  return { season: 'FALL', seasonYear: y };
}

function pageFromOffset(offset = 0, perPage = PAGE_SIZE) {
  return Math.floor(offset / perPage) + 1;
}

async function trendingEntries({ offset = 0, limit = PAGE_SIZE } = {}) {
  const page = pageFromOffset(offset, limit);
  const perPage = limit;
  const query = `
    query ($page: Int, $perPage: Int) {
      Page(page: $page, perPage: $perPage) {
        media(
          type: ANIME, 
          sort: TRENDING_DESC,
          status: RELEASING,
          format_not_in: [MOVIE]
        ) {
          id
          title { romaji english native }
          description(asHtml: false)
          seasonYear
          coverImage { medium large }
          bannerImage
          genres
        }
      }
    }
  `;
  const data = await gql(query, { page, perPage });
  return (data.Page?.media || []).map(toCatalogMeta);
}

async function popularThisSeasonEntries({ offset = 0, limit = PAGE_SIZE } = {}) {
  const page = pageFromOffset(offset, limit);
  const perPage = limit;
  const { season, seasonYear } = getCurrentSeasonYear();
  const query = `
    query ($page: Int, $perPage: Int, $season: MediaSeason, $seasonYear: Int) {
      Page(page: $page, perPage: $perPage) {
        media(
          type: ANIME,
          season: $season,
          seasonYear: $seasonYear,
          sort: POPULARITY_DESC,
          format_not_in: [MOVIE]
        ) {
          id
          title { romaji english native }
          description(asHtml: false)
          seasonYear
          coverImage { medium large }
          bannerImage
          genres
        }
      }
    }
  `;
  const data = await gql(query, { page, perPage, season, seasonYear });
  return (data.Page?.media || []).map(toCatalogMeta);
}

module.exports = { trendingEntries, popularThisSeasonEntries, PAGE_SIZE };
